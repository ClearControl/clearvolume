plugins {
    id "com.jfrog.bintray" version "1.8.3"
    id "com.diffplug.gradle.spotless" version "3.1.0"
    id "de.undercouch.download" version "3.4.3"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'


project.ext.masterfile = (new File(projectDir,'/gradle/master.gradle')).getAbsolutePath()

// Attempts to download master gradle file
try {
    download {
        src 'https://github.com/ClearControl/master/blob/master/master.gradle?raw=true'
        dest project.ext.masterfile
        overwrite false
        onlyIfModified true
        tempAndMove true
    }
}
catch (Throwable e)
{
}

apply from: project.ext.masterfile

//***********************************************************************************
// JAVA CODE BUILDING

sourceSets {
    main
    {
        java
        { srcDir 'src/main/java' }
        resources
        { srcDir 'src/main/java' }
    }
    test
    {
        java
        { srcDir 'src/test/java' }
        resources
        { srcDir 'src/test/java' }
    }
}

[
	compileJava,
	compileTestJava
]*.options*.encoding = 'UTF-8'

javadoc { options.charSet = 'UTF-8' }

sourceCompatibility = 1.8
targetCompatibility = 1.8

test
{
	testLogging.showStandardStreams = true
	testLogging
	{ events "passed", "skipped", "failed" }

	exclude '**/demo/**'
	exclude '**/run/**'

	maxHeapSize = "4G"

    forkEvery = 1
}


def versionOverrides = [
	"org.jdom:jdom2": "2.0.5"
]

configurations.all
{
	// check for updates every build
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
	resolutionStrategy.force("org.jdom:jdom2:2.0.5")
}


dependencies
{
  compile 'commons-lang:commons-lang:2.6'
  compile 'commons-io:commons-io:2.5'
  compile 'net.sf.trove4j:trove4j:3.0.3'
  compile 'args4j:args4j:2.0.29'
  compile 'com.apple:AppleJavaExtensions:1.4'
  compile 'com.miglayout:miglayout:3.7.4'
	
  //ClearCL:
  compile ('net.clearcontrol:clearcl:'+depver("clearcl")) {transitive= true; changing= true}

  //ClearAudio:
  compile ('net.clearcontrol:clearaudio:'+depver("clearaudio")) {transitive= true; changing= true}

  //ClearGL:
  compile ('net.clearvolume:cleargl:'+depver("cleargl"))  {transitive= true; changing= true}
	
  compile group: 'junit', name: 'junit', version: '4.12'
  testCompile group: 'junit', name: 'junit', version: '4.12'

}

repositories
{
	mavenCentral()
	mavenLocal()
	jcenter()

	maven { url  "http://dl.bintray.com/clearvolume/ClearVolume"  }
	maven { url  "http://oss.sonatype.org/content/groups/public" }
	maven { url  "http://dl.bintray.com/clearcontrol/ClearControl" }
	maven { url  "http://maven.imagej.net/content/repositories/snapshots" }
    maven { url  "http://maven.imagej.net/content/repositories/releases/"}
	
	maven { url  "https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases" }
    maven { url  "http://artifacts.openmicroscopy.org/artifactory/maven/"}
}


task sourcesJar(type: Jar, dependsOn:classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

if (JavaVersion.current().isJava8Compatible()) {
	allprojects {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}
}




//***********************************************************************************

// PUBLISHING


group   = project.ext.groupname
version = project.ext.versionsMap[project.name]


artifacts
{
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar { classifier "sources" }
        }
    }
}



