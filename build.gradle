plugins {
  id "us.kirchmeier.capsule" version "0.9.0"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'c'
apply plugin: 'cpp'

model {
    platforms {
        x64 {
            architecture "x86_64"
        }
    }

    repositories {
        libs(PrebuiltLibraries) {
            jvm {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("./cpp/jvmlib/jvm.lib")
                }
            }
        }
    }

    toolChains {
        visualCpp(VisualCpp) {
            // Specify the installDir if Visual Studio cannot be located
            // installDir "C:/Apps/Microsoft Visual Studio 10.0"
        }
    }
}

binaries.all {
    if (toolChain in VisualCpp) {
        cppCompiler.args "/EHsc"
    }
}

libraries {
   cvlib {
        targetPlatforms "x64"
   }
}

sources {
    cvlib {
        cpp {
            source {
                srcDirs "cpp"
                include "**/*.cpp"
            }
            exportedHeaders {
                srcDirs "cpp","cpp/lib"
                include "**/*.h"
            } 
        }
    }
}

executables {
    cvlib_test {
        targetPlatforms "x64"
        binaries.all {
            lib libraries.cvlib.shared 
            //cCompiler.args "-ljvm", "-std=gnu99" 
        }
    }
}

sources {
    cvlib_test {
        cpp {
            source {
                srcDir "cpp"
                include "cvlib_test.cpp"
            }
            lib library: 'jvm'
        }
    }
    
}






sourceSets 
{
  main 
  {
    java 
    {
      srcDir 'src'
    }
    resources 
    { 
      srcDir 'src'
      srcDir 'cpp/jogllibs'
    }
  }
  test
  {
    java 
    {
      srcDir 'src'
    }
    resources 
    { 
      srcDir 'src'
    }
  }
}


sourceCompatibility = 1.8
group = 'royer'
version = '1.0'

test 
{
    testLogging.showStandardStreams = true 
    testLogging 
    {
        events "passed", "skipped", "failed"
    }

    exclude '**/demo/**'
    exclude '**/run/**'

    maxHeapSize = "4G"
}



configurations.all 
{
  // check for updates every build
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies 
{
    compile group: 'commons-collections', name: 'commons-collections', version: '3.+'
    compile group: 'commons-lang', name: 'commons-lang', version: '2.+'
    compile group: 'commons-io', name: 'commons-io', version: '2.+'
    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.+'
    compile 'net.sf.trove4j:trove4j:3.0.3'
    compile 'com.miglayout:miglayout:3.7.4'
    compile 'args4j:args4j:2.0.29'
    compile 'com.nativelibs4java:bridj:0.7-SNAPSHOT'
    compile 'com.nativelibs4java:javacl:1.0-SNAPSHOT'

    compile group: "royer", name: "ClearGL", version: "1.+", changing: true, transitive: true 
    compile group: "royer", name: "ClearCuda", version: "1.+", changing: true, transitive: true 
    compile fileTree(dir: 'libs/jcuda', include: '*.jar')

    compile group: 'junit', name: 'junit', version: '4.+'
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

repositories 
{
    mavenCentral()
    maven 
    {
        url "http://bitbucket.org/api/1.0/repositories/royerloic/repos/raw/master/"
    } 
    maven 
    {
        url "http://oss.sonatype.org/content/groups/public"
    } 

}

jar {
    def classpath  = configurations.compile.collect { it.directory&&{println it; true} ? it : zipTree(it) } 
    from(classpath)
    {
        exclude "gluegen-rt.dll"
        exclude "jogl_desktop.dll"
        exclude "jogl_mobile.dll"
        exclude "nativewindow_awt.dll"
        exclude "nativewindow_win32.dll"
        exclude "newt.dll"
    }
    
    manifest {
        attributes("Class-Path": ".")
    }
}


task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
  }

artifacts 
{
    archives sourcesJar
    archives javadocJar
}

uploadArchives 
{
    repositories 
    {
        mavenDeployer 
        {
            repository(url: "file:../../Repos/")
        }
    }
}

task fatCapsule(type: FatCapsule) {
  applicationClass 'clearvolume.main.ClearVolumeMain'
  reallyExecutable
}


task copyCapsule{
  doLast {
      copy{
        from('./build/libs/')
        into('./build/executable')
        include('*-capsule.jar')
        rename('.+-capsule.jar','ClearVolume.exe.jar')
        }
    }
}


task packagecvlib {
  doLast {
    def os = System.getProperty("os.name").toLowerCase() 
    if (os.contains("windows"))
    {
        copy
        {
            from('./build/binaries/cvlibSharedLibrary/')
            into('./build/cvlib/')
            include('cvlib.dll')
        }

        copy
        {
            from('./cpp/')
            into('./build/cvlib/')
            include('cvlib.h')
        }

        copy
        {
            from('./build/binaries/cvlib_testExecutable/')
            into('./build/cvlib/')
            include('cvlib_test.exe')
        }

        copy
        {
            from('./build/libs/')
            into('./build/cvlib/')
            include('ClearVolume-???.jar')
            rename('ClearVolume-.+.jar','ClearVolume.jar')
        }
    }
  }
}











