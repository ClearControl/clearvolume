

plugins {
	id "us.kirchmeier.capsule" version "0.9.0" //  VERSION 0.10.0 of Capsule has a bug!! staying with 0.9.0
	id "com.jfrog.bintray" version "1.2"
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'c'
apply plugin: 'cpp'
apply plugin: 'idea'


[
	compileJava,
	compileTestJava
]*.options*.encoding = 'UTF-8'


//***********************************************************************************
// NATIVE CODE BUILDING

import org.apache.tools.ant.taskdefs.condition.Os

String cmakefolder = "./build/cmake"

// cmake task:
task cmake(type:Exec) {

	File lFile = new File(cmakefolder)
	lFile.mkdir()

	inputs.dir lFile.absolutePath

	workingDir cmakefolder

	def cmake_args = [] as List
	cmake_args.add('../../src/cpp')

	if (Os.isFamily(Os.FAMILY_WINDOWS))
	{
		cmake_args.add("-G\"Visual Studio ${project.vsversion} x64\"")
		executable 'cmake'
		args cmake_args
	}
	else if (Os.isFamily(Os.FAMILY_MAC))
	{
		executable 'cmake'
		args cmake_args
	}
	else if (Os.isFamily(Os.FAMILY_UNIX))
	{
		executable 'cmake'
		args cmake_args
	}

	println commandLine
}



// make task:
task make(type:Exec) {

	File lFile = new File(cmakefolder)
	lFile.mkdir()

	inputs.dir lFile.absolutePath

	workingDir cmakefolder

	def make_args = [] as List

	if (Os.isFamily(Os.FAMILY_WINDOWS))
	{
		executable 'make'
		args make_args
	}
	else if (Os.isFamily(Os.FAMILY_MAC))
	{
		executable 'make'
		args make_args
	}
	else if (Os.isFamily(Os.FAMILY_UNIX))
	{
		executable 'make'
		args make_args
	}

	println commandLine
}

make.dependsOn cmake



//***********************************************************************************
// JAVA CODE BUILDING

sourceSets
{
	main
	{
		java
		{ srcDir 'src/java' }
		resources
		{  srcDir 'src/java' }
	}
	test
	{
		java
		{ srcDir 'src/java' }
		resources
		{  srcDir 'src/java' }
	}
}

javadoc { options.charSet = 'UTF-8' }

sourceCompatibility = 1.7
targetCompatibility = 1.7

test
{
	testLogging.showStandardStreams = true
	testLogging
	{ events "passed", "skipped", "failed" }

	exclude '**/demo/**'
	exclude '**/run/**'

	maxHeapSize = "4G"
}


def versionOverrides = [
	"org.jdom:jdom2": "2.0.5"
]

configurations.all
{
	// check for updates every build
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
	resolutionStrategy.force("org.jdom:jdom2:2.0.5")
}


dependencies
{

	compile group: 'commons-collections', name: 'commons-collections', version: '3.2.1'
	compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
	compile group: 'commons-io', name: 'commons-io', version: '2.4'
	compile group: 'org.apache.commons', name: 'commons-math3', version: '3.4.1'
	compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.1'
	compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.1'

	compile 'net.sf.trove4j:trove4j:3.0.3'
	compile 'com.miglayout:miglayout:3.7.4'
	compile 'args4j:args4j:2.0.29'
	compile 'com.apple:AppleJavaExtensions:1.4'

	compile group: "net.coremem", name: "CoreMem", version: "(,1.0.0]", changing: true, transitive:true
	compile 'com.nativelibs4java:javacl:1.0.0-RC4'

	compile 'org.xeustechnologies:jcl-core:2.6'


	// usage: gradle .... -Plocal=true
	if (project.hasProperty('local')) {
		println 'Using local clearCUDA and clearGL sources'
		compile project(':cleargl')
		compile project(':clearcuda')
	}
	else {
		println 'Using clearCUDA and clearGL from Maven repository'/**/
		compile group: "net.clearvolume", name: "cleargl", version: "(,1.0]", changing: true, transitive: true
		compile group: "net.clearvolume", name: "clearcuda", version: "(,1.0]", changing: true, transitive: true
	}

	compile group: 'junit', name: 'junit', version: '4.12'
	testCompile group: 'junit', name: 'junit', version: '4.12'

}

repositories
{
	mavenCentral()
	maven
	{ url  "http://dl.bintray.com/clearvolume/ClearVolume"  }
	maven
	{ url  "http://dl.bintray.com/royerloic/maven" }
	maven
	{ url "http://oss.sonatype.org/content/groups/public" }
	maven { url  "http://dl.bintray.com/rtlib/CoreMem" }

}



/*jar {
 def classpath  = configurations.compile.collect { it.directory&&{println it; true} ? it : zipTree(it) } 
 from(classpath)
 manifest {
 attributes("Class-Path": ".", 'Main-Class': 'clearvolume.main.ClearVolumeMain')
 }
 }/**/

task cvFatJar(type:Jar) {
	archiveName = "ClearVolume.fat.jar"
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar

	manifest {
		attributes("Class-Path": ".", 'Main-Class': 'clearvolume.main.ClearVolumeMain')
	}
}


task sourcesJar(type: Jar, dependsOn:classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

if (JavaVersion.current().isJava8Compatible()) {
	allprojects {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}
}




//***********************************************************************************
// FAT CAPSULE TASKS

task fatCapsule(type: FatCapsule) {
	applicationClass 'clearvolume.main.ClearVolumeMain'
	reallyExecutable
}


task copyCapsule{
	copy{
		from('./build/libs/')
		into('./build/executable')
		include('*-capsule.jar')
		rename('.+-capsule.jar','ClearVolume.exe.jar')
	}
}

copyCapsule.dependsOn fatCapsule


//***********************************************************************************
// CVLIB PACKAGING TASKS

task packagecvlib {

	def os = System.getProperty("os.name").toLowerCase()
	if (os.contains("win"))
	{
		copy
		{
			from('./build/binaries/cvlibSharedLibrary/')
			into('./build/cvlib/')
			include('cvlib.dll')
		}

		copy
		{
			from('./src/cpp/')
			into('./build/cvlib/')
			include('cvlib.h','cvlib_test.cpp')
		}

		copy
		{
			from('./build/binaries/cvlib_testExecutable/')
			into('./build/cvlib/')
			include('cvlib_test.exe')
		}

		copy
		{
			from('./build/libs/')
			into('./build/cvlib/')
			include('ClearVolume.fat.jar')
			rename('ClearVolume.fat.jar','ClearVolume.jar')
		}
	}

}

task packagelvcvlib {

	def os = System.getProperty("os.name").toLowerCase()
	if (os.contains("win"))
	{
		copy
		{
			from('./src/labview/')
			into('./build/labview/')
			include('*')
		}

		copy
		{
			from('./src/labview/lvcvlib')
			into('./build/labview/lvcvlib/')
			include('*')
		}

		copy
		{
			from('./src/labview/lvcvlib/VIs')
			into('./build/labview/lvcvlib/VIs')
			include('*')
		}

		copy
		{
			from('./build/binaries/cvlibSharedLibrary/')
			into('./build/labview/lvcvlib/')
			include('cvlib.dll')
		}

		copy
		{
			from('./build/libs/')
			into('./build/labview/')
			include('ClearVolume.fat.jar')
			rename('ClearVolume.fat.jar','ClearVolume.jar')
		}

	}
}






//***********************************************************************************
// DISTRIBUTION PACKAGING TASKS

task collectdistribution {

	copy
	{
		from('./build/executable/')
		into('./build/distribution/')
		include "*.jar"
	}
	
	copy
	{
		from('./build/labview/')
		into('./build/distribution/labview')
		include "*.jar"
	}
	
	copy
	{
		from('./build/cvlib/')
		into('./build/distribution/cvlib')
		include "*.jar"
	}

	copy
	{
		from('./build/libs/')
		into('./build/distribution/javalibs')
		include "*.*"
		include '**/**'
		exclude '**/*capsule.jar'
	}

}

collectdistribution.dependsOn copyCapsule


task packagezip(type:Exec,dependsOn:collectdistribution) {

	def os = System.getProperty("os.name").toLowerCase()
	//println "OS:"+os
	//if (os.contains("nix") || os.contains("mac"))
	//	{
	workingDir '.'
	commandLine './packagezip.sh'
	standardOutput = new ByteArrayOutputStream()
	ext.output = {return standardOutput.toString()}
	//}
}


task collectDependencies(type: Copy) {
	into "./build/libs/dependencies"
	from configurations.runtime
}


//***********************************************************************************
// PUBLISHING

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = {
	->
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'describe', '--tags'
		standardOutput = stdout
	}
	return stdout.toString().trim()
}

group = 'net.clearvolume'
version = getVersionName()

artifacts
{
	archives sourcesJar
	archives javadocJar
}

publishing {
	publications {
		maven(MavenPublication) {
			from components.java
			artifact sourcesJar { classifier "sources" }
		}
	}
}

if(hasProperty('bintray_user') && hasProperty('bintray_key') )
{
	bintray {

		// property must be set in ~/.gradle/gradle.properties
		user = bintray_user
		key =  bintray_key

		publications = [
			'maven'] //When uploading configuration files
		dryRun = false //Whether to run this as dry-run, without deploying
		publish = true //If version should be auto published after an upload
		pkg {
			repo = 'ClearVolume'
			userOrg = 'clearvolume' //An optional organization name when the repo belongs to one of the user's orgs
			name = 'ClearVolume'
			desc = 'ClearVolume'
			websiteUrl = 'https://clearvolume.github.io/ClearVolume/'
			issueTrackerUrl = 'https://github.com/ClearVolume/ClearVolume/issues'
			vcsUrl = 'https://github.com/ClearVolume/ClearVolume.git'
			//licenses = ['Apache-2.0']
			labels = [
				'ClearVolume',
				'Visualization',
				'3D',
				'Microscopy',
				'Real-time'
			]
			publicDownloadNumbers = true
			//attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes
			//Optional version descriptor
			version {
				name = project.version //Bintray logical version name
				desc = '.'
				released  = new java.util.Date()
				vcsTag = project.version
				/*attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin'] //Optional version-level attributes
				 gpg {
				 sign = false //Determines whether to GPG sign the files. The default is false
				 passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
				 }
				 mavenCentralSync {
				 sync = false //Optional (true by default). Determines whether to sync the version to Maven Central.
				 user = 'userToken' //OSS user token
				 password = 'paasword' //OSS user password
				 close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
				 }  /**/          
			}
		}
	}
	/**/
}





